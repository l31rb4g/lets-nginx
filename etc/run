#!/usr/bin/python3
import os
import re
import shutil
from time import sleep
from subprocess import call, check_output, PIPE


PATH_CERTS = '/certs'
PATH_CONFIG = '/nginx_conf/certs'


class LetsNGINX:
    version = '3.0'
    tag = '\033[1m[let\'s nginx]\033[m'

    def __init__(self):
        self.log('\n' * 10)
        self.log(f'=' * 60)
        self.log(f'\033[1;37mLet\'s NGINX {self.version}\033[m')
        self.log(f'=' * 60)
        self.log()

        self.processar_certificados()
        self.enable_confs()
        self.run()

    def log(self, msg=''):
        print(f'{self.tag} {msg}', flush=True)

    def run(self):
        self.log()
        self.log('Iniciando o NGINX')
        self.log('-' * 60)
        call(['nginx', '-g' 'daemon off;'])

    def processar_certificados(self):
        '''Lê a configuração e emite os certificados pelo certbot, se necessário'''

        certs = self._list_certs()
        self.log(f'Certificados configurados: {len(certs)}')
        self.log('-' * 60)

        for cert_name in certs:
            self.log(f'\033[36m{cert_name}\033[m')

            _cert = self._read_cert(cert_name)

            if not _cert:
                continue

            domains, email = _cert

            self.log(f'Domínios: ' + domains[0])
            for domain in domains[1:]:
                self.log(f'          {domain}')
            self.log(f'E-mail: {email}')

            if os.path.exists(f'{PATH_CERTS}/{cert_name}'):
                self.log('Situação: \033[32mregistrado\033[m')

            else:
                self.log('Situação: \033[33mregistrando...\033[m')
                self.log()

                domain_list = ','.join(domains)
                error = None

                try:
                    out = check_output([
                        'certbot',
                        'certonly',
                        '--non-interactive',
                        '--standalone',
                        '--agree-tos',
                        '--email', email,
                        '-d', domain_list,
                    ], stderr=PIPE)
                except:
                    error = check_output(['tail', '-n1', '/var/log/letsencrypt/letsencrypt.log']).decode().strip()
                    self.log(f'\033[31m{error}\033[m')

                if not error:
                    for line in out.decode().split('\n'):
                        if line:
                            self.log('\033[33m' + line  + '\033[m')

                            if 'Certificate is saved at: ' in line:
                                self.link(cert_name, line.split('Certificate is saved at: ')[1].strip())
                            elif 'Key is saved at: ' in line:
                                self.link(cert_name, line.split('Key is saved at: ')[1].strip())

            self.log(f'-' * 60)
    
    def link(self, cert_name:str, filename:str):
        if not os.path.exists(PATH_CERTS):
            os.mkdir(PATH_CERTS)

        _path = f'{PATH_CERTS}/{cert_name}'
        if not os.path.exists(_path):
            os.mkdir(_path)

        _file = re.sub('^(.*)/([^/]+)$', r'\2', filename)
        call(['ln', '-s', filename, f'{PATH_CERTS}/{cert_name}/{_file}'])

    def _list_certs(self) -> list:
        if not os.path.exists(PATH_CONFIG):
            return []
        return os.listdir(PATH_CONFIG)

    def _read_cert(self, cert_name) -> tuple:
        '''returns (domains:list, email:str)'''
        try:
            with open(f'{PATH_CONFIG}/{cert_name}') as _f:
                _cert = _f.readlines()

            domains = [domain.strip() for domain in _cert[0:-2]]
            email = _cert[-1].strip()
        except:
            self.log('Este certificado tem erros de sintaxe e será ignorado.')
            self.log()
            return None

        return (domains, email)

    def enable_confs(self):
        self.log()
        self.log('Validando configuração')
        enabled = []

        for cfg in ['default', 'https']:
            self.log('-' * 60)
            self.log(f'\033[36m{cfg}\033[m')

            _from = f'/nginx_conf/{cfg}.conf'
            _to = f'/etc/nginx/http.d/{cfg}.conf'

            if os.path.exists(_to):
                os.remove(_to)

            if os.path.exists(_from):
                if cfg == 'default':
                    self.log('\033[32mConfiguração habilitada.\033[m')

                if cfg == 'https':
                    if not self._validate_https(_from):
                        self.log((f'\033[35mO https vai ficar desativado porque não foi possível localizar '
                                  'todos os certificados.\033[m'))
                        continue

                    self.log(f'\033[7;49;92m ✅ Todos os certificados foram encontrados! \033[m')
                    self.log('-' * 60)

                enabled.append(f'{cfg}.conf')
                shutil.copyfile(_from, _to)

            if not os.path.exists(_from):
                if cfg == 'default':
                    self.log('\033[31mNão encontrado.\033[m')

    def _validate_https(self, filepath) -> bool:
        out = True
        with open(filepath) as _f:
            for _line in _f.readlines():
                line = _line.strip()
                if line and re.match('ssl_certificate', line):
                    cert = re.findall('ssl_([^ ]+) (.*);', line)[0]
                    cert_type = cert[0].strip()
                    cert_path = cert[1].strip()
                    cert_date = ''
                    color = ''

                    if os.path.exists(cert_path):
                        cert_status = '\033[32m[OK]\033[m'
                        _date = check_output('ls -la ' + cert_path + ' | awk \'{print $6,$7}\'', shell=True)
                        cert_date = '(' + _date.decode().strip() + ')'
                    else:
                        cert_status = '\033[31m[NOT FOUND]\033[m'
                        out = False

                    pad = ' ' * (56 - len(cert_status) - len(cert_path))
                    self.log(f'{cert_status} {cert_path} {pad} {cert_date}')
        return out

if __name__ == '__main__':
    LetsNGINX()
