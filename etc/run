#!/usr/bin/python3
import os
from subprocess import call, check_output, PIPE


PATH_CERTS = '/nginx_conf/certs'
PATH_REGISTRY = '/certs'


class LetsNGINX:
    version = '3.0'

    def __init__(self):
        self.log('\n' * 10)
        self.log(f'=' * 60)
        self.log(f'\033[1;37mLet\'s NGINX {self.version}\033[m')
        self.log(f'=' * 60)
        self.log()

        if not os.path.exists(PATH_REGISTRY):
            os.mkdir(PATH_REGISTRY)

        certs = self._list_certs()
        self.log(f'Certificados encontrados: {len(certs)}')
        self.log('-' * 60)

        for cert_name in certs:
            self.log(f'\033[36m{cert_name}\033[m')

            domains, email = self._read_cert(cert_name)

            self.log(f'Domínios: ' + domains[0])
            for domain in domains[1:]:
                self.log(f'          {domain}')
            self.log(f'E-mail: {email}')

            if os.path.exists(f'{PATH_REGISTRY}/{cert_name}'):
                self.log('Situação: \033[32mregistrado\033[m')
            else:
                self.log('Situação: \033[33mregistrando...\033[m')
                self.log()

                call(['cp', f'{PATH_CERTS}/{cert_name}', f'{PATH_REGISTRY}/{cert_name}'])
                domain_list = ','.join(domains)

                out = check_output([
                    'certbot',
                    'certonly',
                    '--non-interactive',
                    '--standalone',
                    '--agree-tos',
                    '--email', email,
                    '-d', domain_list,
                ], stderr=PIPE)

                for line in out.decode():
                    self.log('\033[33m' + line  + '\033[m')

            self.log(f'-' * 60)

            #call(['certbot', 'certificates'])

        self.run()

    def run(self):
        self.log()
        self.log('Iniciando o NGINX')
        #call(['nginx', '-g' 'daemon off;'])
        call(['tail', '-f', '/dev/null'])
    
    def log(self, msg=''):
        TAG = '\033[1m[let\'s nginx]\033[m'
        print(f'{TAG} {msg}', flush=True)

    def _list_certs(self) -> list:
        if not os.path.exists(PATH_CERTS):
            return []
        return os.listdir(PATH_CERTS)

    def _read_cert(self, cert_name) -> tuple:
        '''returns (domains:list, email:str)'''
        with open(f'{PATH_CERTS}/{cert_name}') as _f:
            _cert = _f.readlines()

        domains = [domain.strip() for domain in _cert[0:-2]]
        email = _cert[-1].strip()
        return (domains, email)


if __name__ == '__main__':
    LetsNGINX()
