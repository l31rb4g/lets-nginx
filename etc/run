#!/usr/bin/python3
import os
import re
from subprocess import call, check_output, PIPE


PATH_CERTS = '/certs'
PATH_CONFIG = '/nginx_conf/certs'


class LetsNGINX:
    version = '3.0'
    tag = '\033[1m[let\'s nginx]\033[m'

    def __init__(self):
        self.log('\n' * 10)
        self.log(f'=' * 60)
        self.log(f'\033[1;37mLet\'s NGINX {self.version}\033[m')
        self.log(f'=' * 60)
        self.log()

        self.processar_certificados()
        self.run()

    def log(self, msg=''):
        print(f'{self.tag} {msg}', flush=True)

    def run(self):
        self.log()
        self.log('Iniciando o NGINX')
        #call(['nginx', '-g' 'daemon off;'])
        call(['tail', '-f', '/dev/null'])

    def processar_certificados(self):
        '''Lê a configuração e emite os certificados pelo certbot, se necessário'''

        certs = self._list_certs()
        self.log(f'Certificados configurados: {len(certs)}')
        self.log('-' * 60)

        for cert_name in certs:
            self.log(f'\033[36m{cert_name}\033[m')

            domains, email = self._read_cert(cert_name)

            self.log(f'Domínios: ' + domains[0])
            for domain in domains[1:]:
                self.log(f'          {domain}')
            self.log(f'E-mail: {email}')

            if os.path.exists(f'{PATH_CERTS}/{cert_name}'):
                self.log('Situação: \033[32mregistrado\033[m')

            else:
                self.log('Situação: \033[33mregistrando...\033[m')
                self.log()

                domain_list = ','.join(domains)

                try:
                    out = check_output([
                        'certbot',
                        'certonly',
                        '--non-interactive',
                        '--standalone',
                        '--agree-tos',
                        '--email', email,
                        '-d', domain_list,
                    ], stderr=PIPE)
                except:
                    error = check_output(['tail', '-n1', '/var/log/letsencrypt/letsencrypt.log']).decode().strip()
                    self.log(f'\033[31mErro ao gerar certificado: {error}\033[m')
                    from time import sleep
                    sleep(60)

                for line in out.decode().split('\n'):
                    if line:
                        self.log('\033[33m' + line  + '\033[m')

                        if 'Certificate is saved at: ' in line:
                            self.link(cert_name, line.split('Certificate is saved at: ')[1].strip())
                        elif 'Key is saved at: ' in line:
                            self.link(cert_name, line.split('Key is saved at: ')[1].strip())

            self.log(f'-' * 60)
    
    def link(self, cert_name:str, filename:str):
        self.log('Linkando certificado ' + filename)

        if not os.path.exists(PATH_CERTS):
            os.mkdir(PATH_CERTS)

        _path = f'{PATH_CERTS}/{cert_name}'
        if not os.path.exists(_path):
            os.mkdir(_path)

        _file = re.sub('^(.*)/([^/]+)$', r'\2', filename)
        call(['ln', '-s', filename, f'{PATH_CERTS}/{cert_name}/{_file}'])

    def _list_certs(self) -> list:
        if not os.path.exists(PATH_CONFIG):
            return []
        return os.listdir(PATH_CONFIG)

    def _read_cert(self, cert_name) -> tuple:
        '''returns (domains:list, email:str)'''
        with open(f'{PATH_CONFIG}/{cert_name}') as _f:
            _cert = _f.readlines()

        domains = [domain.strip() for domain in _cert[0:-2]]
        email = _cert[-1].strip()
        return (domains, email)

    '''
    def _validate_https(self, filepath) -> bool:
        self.log('Validando https')
        out = True

        with open(filepath) as _f:
            for _line in _f.readlines():
                line = _line.strip()
                if line and re.match('ssl_certificate', line):
                    cert = re.findall('ssl_([^ ]+) (.*);', line)[0]
                    cert_type = cert[0].strip()
                    cert_path = cert[1].strip()
                    color = ''

                    if os.path.exists(cert_path):
                        cert_status = '\033[32m[OK]\033[m'
                    else:
                        cert_status = '\033[31m[NOT FOUND]\033[m'
                        out = False

                    self.log(f'{cert_status} {cert_path}')
        return out
    '''

if __name__ == '__main__':
    LetsNGINX()
